import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  TextInput,
  Button,
  StyleSheet,
  TouchableOpacity,
} from "react-native";
import * as Yup from "yup";
import { useFormik } from "formik";
import { Linking } from "react-native";
import { useRegisterMutation } from "../../redux/services/authApi"; // Assuming RTK Query setup
import jwtDecode from "jwt-decode"; // Install `jwt-decode` library if not already

const RegisterScreen = ({navigation}) => {
  const [register, { isLoading }] = useRegisterMutation();
  const [tokenData, setTokenData] = useState(null); // To store decoded token details
  const [token, setToken] = useState(null); // Raw token from URL

  useEffect(() => {
    const getTokenFromUrl = async () => {
      try {
        const initialUrl = await Linking.getInitialURL();
        if (initialUrl) {
          const parsedToken = new URLSearchParams(initialUrl.split("?")[1]).get(
            "token"
          );
          setToken(parsedToken);

          // Decode the token to extract schoolId and roleId
          if (parsedToken) {
            const decoded = jwtDecode(parsedToken);
            setTokenData({
              schoolId: decoded.schoolId,
              roleId: decoded.roleId,
            });
          }
        }
      } catch (error) {
        console.error("Error fetching token from URL", error);
      }
    };

    getTokenFromUrl();
  }, []);

  const validationSchema = Yup.object({
    email: Yup.string().email("Invalid email").required("Email is required"),
    password: Yup.string()
      .min(6, "Password must be at least 6 characters")
      .required("Password is required"),
    name: Yup.string().required("Name is required"),
  });

  const formik = useFormik({
    initialValues: {
      email: "",
      password: "",
      name: "",
    },
    validationSchema,
    onSubmit: async (values) => {
      if (!token) {
        console.log("Error: Token is missing.");
        return;
      }

      try {
        // Pass the user data and token to the API
        const response = await register({
          ...values,
          token,
        }).unwrap();

        console.log("Registration successful:", response);
        // Navigate to the next screen
      } catch (error) {
        console.log("Error during registration:", error?.data?.message);
      }
    },
  });

  if (!tokenData) {
    return (
      <View style={styles.loadingContainer}>
        <Text>Loading...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Register</Text>

      {/* Prefilled Fields */}
      <TextInput
        style={styles.input}
        value={`School ID: ${tokenData.schoolId}`}
        editable={false}
      />
      <TextInput
        style={styles.input}
        value={`Role ID: ${tokenData.roleId}`}
        editable={false}
      />

      {/* Editable Fields */}
      <TextInput
        style={styles.input}
        placeholder="Name"
        onChangeText={formik.handleChange("name")}
        onBlur={formik.handleBlur("name")}
        value={formik.values.name}
      />
      {formik.touched.name && formik.errors.name && (
        <Text style={styles.error}>{formik.errors.name}</Text>
      )}

      <TextInput
        style={styles.input}
        placeholder="Email"
        keyboardType="email-address"
        onChangeText={formik.handleChange("email")}
        onBlur={formik.handleBlur("email")}
        value={formik.values.email}
      />
      {formik.touched.email && formik.errors.email && (
        <Text style={styles.error}>{formik.errors.email}</Text>
      )}

      <TextInput
        style={styles.input}
        placeholder="Password"
        secureTextEntry
        onChangeText={formik.handleChange("password")}
        onBlur={formik.handleBlur("password")}
        value={formik.values.password}
      />
      {formik.touched.password && formik.errors.password && (
        <Text style={styles.error}>{formik.errors.password}</Text>
      )}

      <Button
        title={isLoading ? "Registering..." : "Register"}
        onPress={formik.handleSubmit}
        disabled={isLoading}
      />

      <TouchableOpacity onPress={() => navigation.navigate("Login")}>
        <Text style={styles.linkText}>Already have an account? Login</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16 },
  title: { fontSize: 24, fontWeight: "bold", marginBottom: 16 },
  input: { borderWidth: 1, borderColor: "#ccc", padding: 8, marginVertical: 8 },
  error: { color: "red", fontSize: 12 },
  linkText: { color: "blue", marginTop: 16 },
  loadingContainer: { flex: 1, justifyContent: "center", alignItems: "center" },
});

export default RegisterScreen;
